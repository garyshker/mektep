let num1, num2, operator, correctAnswer;
let currentQuestion = 0;
let correctAnswers = 0;
const totalQuestions = 10;
let mode = 'basic';
let answered = false;

function startGame(selectedMode) {
  mode = selectedMode;
  document.getElementById('back-button').style.display = 'block'; // –ñ–∞–±—à—ã –±–∞—Ç—ã—Ä–º–∞—Å—ã
  currentQuestion = 0;
  correctAnswers = 0;
  
  document.getElementById('mode-select').style.display = 'none';
  document.getElementById('game-area').style.display = 'block';

  // –ë“±–ª –∂–æ–ª–¥—ã —Å–æ“£—ã–Ω–∞ “õ–∞—Ä–∞–π “õ–æ–π –Ω–µ–º–µ—Å–µ —Ç–µ–∫—Å–µ—Ä:
  if (document.getElementById('restart-button')) {
    document.getElementById('restart-button').style.display = 'none';
  }

  generateQuestion();
}

function restartGame() {
  currentQuestion = 0;
  correctAnswers = 0;
  document.getElementById('restart-button').style.display = 'none';
  document.getElementById('options').innerHTML = '';
  document.getElementById('result').innerHTML = '';
  generateQuestion();
}

function returnToMenu() {
  document.getElementById('mode-select').style.display = 'block';
  document.getElementById('back-button').style.display = 'none';
  document.getElementById('game-area').style.display = 'none';
  document.getElementById('title-heading').style.display = 'block';
}

function generateQuestion() {
  answered = false;

  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç–∏–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
  document.getElementById('result').textContent = '';
  document.getElementById('result').style.color = '';

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∏–ª–µ–π –∫–Ω–æ–ø–æ–∫
  const oldButtons = document.querySelectorAll('.option-button');
  oldButtons.forEach(btn => {
    btn.classList.remove('correct', 'wrong', 'disabled');
  });
  const isAddition = Math.random() < 0.5;
  operator = isAddition ? '+' : '-';

  if (mode === 'basic') {
    // –†–µ–∂–∏–º 0 - 10: –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 10
    num1 = Math.floor(Math.random() * 11);
    num2 = Math.floor(Math.random() * 11);
  } else if (mode === 'tens') {
    // –†–µ–∂–∏–º 10 - 100: –≤—ã–±–æ—Ä –∏–∑ –¥–µ—Å—è—Ç–∫–æ–≤
    const tens = [10,20,30,40,50,60,70,80,90,100];
    num1 = tens[Math.floor(Math.random() * tens.length)];
    num2 = tens[Math.floor(Math.random() * tens.length)];
  } else if (mode === 'money') {
    // –†–µ–∂–∏–º "–¢–µ“£–≥–µ": —Å–ª–æ–∂–µ–Ω–∏–µ/–≤—ã—á–∏—Ç–∞–Ω–∏–µ –º–æ–Ω–µ—Ç (5, 10, 20, 50, 100, 200)
    const moneyOptions = [1, 2, 5, 10, 20, 50, 100, 200];
    num1 = moneyOptions[Math.floor(Math.random() * moneyOptions.length)];
    num2 = moneyOptions[Math.floor(Math.random() * moneyOptions.length)];
    // Mode "Compare" Yes/No
  } else if (mode === 'compare') {
    num1 = Math.floor(Math.random() * 100) + 1;
    num2 = Math.floor(Math.random() * 100) + 1;
    if (num1 === num2) {
      num2 = (num2 % 100) + 1;
    }

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å: "X > Y ?"
document.getElementById('question-label').textContent = `–°“±—Ä–∞“õ ${currentQuestion + 1}:`;
document.getElementById('math-problem').textContent = `${num1} > ${num2} ?`;

correctAnswer = num1 > num2 ? '–ò”ô' : '–ñ–æ“õ';

const optionsDiv = document.getElementById('options');
optionsDiv.innerHTML = '';

const answerOptions = ['–ò”ô', '–ñ–æ“õ'];
answerOptions.sort(() => Math.random() - 0.5); // –ü–µ—Ä–µ–º–µ—à–∞–µ–º

answerOptions.forEach(ans => {
const btn = document.createElement('button');
btn.textContent = ans;
btn.className = 'option-button';
btn.onclick = () => {
  if (!answered) {
    answered = true;
    handleAnswer(ans, btn);
  }
};
optionsDiv.appendChild(btn);
});

return; // –û—Å—Ç–∞–Ω–æ–≤–∏–º –¥–∞–ª—å—à–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
  }
  else if (mode === 'word') {
    const names = ["–ê–ª–∏", "–ú–∞–¥–∏–Ω–∞", "–ê–π—à–∞", "–î–∞–º–∏—Ä", "–ó–µ—Ä–µ", "–ê–ª–º–∞—Å", "–ê–ª–∞–Ω", "–ú–µ—Ä–µ–π", "–°“±“£“õ–∞—Ä", "“ö–∞—Å—ã–º"];
    const objects = ["–∞–ª–º–∞", "–∫—ñ—Ç–∞–ø", "–¥–æ–ø", "“õ–∞–ª–∞–º", "—Å”ô–±—ñ–∑", "–±–∞–Ω–∞–Ω", "–¥–æ–ª–ª–∞—Ä"];

    const name = names[Math.floor(Math.random() * names.length)];
    const object = objects[Math.floor(Math.random() * objects.length)];
    let start = Math.floor(Math.random() * 10) + 1;
    let change = Math.floor(Math.random() * 10) + 1;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏
    let nameWithEnding = getCorrectEnding(name);

    if (!isAddition && start < change) {
      [start, change] = [change, start];
    }

    correctAnswer = isAddition ? start + change : start - change;

    document.getElementById('question-label').textContent = `–°“±—Ä–∞“õ ${currentQuestion + 1}:`;
    let sentence = '';
    if (isAddition) {
      sentence = `${nameWithEnding} ${start} ${object} –±–∞—Ä –µ–¥—ñ. –û–ª —Ç–∞“ì—ã ${change} ${object} –∞–ª–¥—ã. ${nameWithEnding} “õ–∞–Ω—à–∞ ${object} –±–æ–ª–¥—ã?`;
    } else {
      sentence = `${nameWithEnding} ${start} ${object} –±–∞—Ä –µ–¥—ñ. –û–ª ${change} ${object} –¥–æ—Å—ã–Ω–∞ –±–µ—Ä–¥—ñ. ${nameWithEnding} “õ–∞–Ω—à–∞ ${object} “õ–∞–ª–¥—ã?`;
    }
    document.getElementById('math-problem').textContent = sentence;

    const optionsDiv = document.getElementById('options');
    optionsDiv.innerHTML = '';

    let answers = [correctAnswer];
    while (answers.length < 3) {
      let wrongAnswer = correctAnswer + Math.floor(Math.random() * 5) - 2;
      if (wrongAnswer >= 0 && !answers.includes(wrongAnswer)) {
        answers.push(wrongAnswer);
      }
    }
    answers.sort(() => Math.random() - 0.5);

    answers.forEach(ans => {
      const btn = document.createElement('button');
      btn.className = 'option-button';
      btn.textContent = ans;
      btn.onclick = () => {
        if (!answered) {
          answered = true;
          handleAnswer(ans, btn);
        }
      };
      optionsDiv.appendChild(btn);
    });

    return;
  }

  if (!isAddition && num1 < num2) [num1, num2] = [num2, num1];
  // –î–æ–±–∞–≤–∏–º —Ä–µ–∂–∏–º money –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
  correctAnswer = operator === '+' ? num1 + num2 : num1 - num2;

  document.getElementById('question-label').textContent = `–°“±—Ä–∞“õ ${currentQuestion + 1}:`;
  if (mode === 'money') {
    const imagePath = 'img/'; // –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–Ω–µ—Ç
    document.getElementById('math-problem').innerHTML = `
      <img src="${imagePath}${num1}.webp" alt="${num1} —Ç–µ“£–≥–µ" class="coin-img">
      ${operator}
      <img src="${imagePath}${num2}.webp" alt="${num2} —Ç–µ“£–≥–µ" class="coin-img">
      = ?
    `;
  } else {
    // –£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å textContent, —Ç–∞–∫ —á—Ç–æ –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    document.getElementById('math-problem').textContent = `${num1} ${operator} ${num2} = ?`;
  }
  generateOptions();
}

function generateOptions() {
  const optionsDiv = document.getElementById('options');
  optionsDiv.innerHTML = '';
  let answers = [correctAnswer];
  while (answers.length < 3) {
    let wrongAnswer;
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ 10 - 100
    if (mode === 'tens') {
      const tensOptions = [10,20,30,40,50,60,70,80,90,100];
      wrongAnswer = tensOptions[Math.floor(Math.random() * tensOptions.length)];
    } else {
      wrongAnswer = correctAnswer + Math.floor(Math.random() * 11 - 5);
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–¢–µ“£–≥–µ" –∏–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
      if (mode === 'money') {
        const sums = [];
        const coins = [1, 2, 5, 10, 20, 50, 100, 200];
        for (let i = 0; i < coins.length; i++) {
          for (let j = i; j < coins.length; j++) {
            let sum = coins[i] + coins[j];
            if (sum !== correctAnswer && !sums.includes(sum)) {
              sums.push(sum);
            }
          }
        }
        wrongAnswer = sums[Math.floor(Math.random() * sums.length)];
      }
    }
    if (!answers.includes(wrongAnswer) && wrongAnswer >= 0) {
      answers.push(wrongAnswer);
    }
  }
  answers.sort(() => Math.random() - 0.5);
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
  for (let ans of answers) {
    let btn = document.createElement('button');
    btn.textContent = ans;
    btn.className = 'option-button';
    btn.onclick = () => {
      if (!answered) {
        answered = true;
        handleAnswer(ans, btn);
      }
    };
    optionsDiv.appendChild(btn);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function handleAnswer(selected, buttonEl) {
  const result = document.getElementById('result');
  const buttons = document.querySelectorAll('.option-button');
  const isCorrect = (mode === 'compare') ? (selected === correctAnswer) : (selected === correctAnswer);
  let delay = 1200;

  buttons.forEach(btn => {
    btn.classList.add('disabled');
    if (parseInt(btn.textContent) === correctAnswer) {
      btn.classList.add('correct');
    }
  });

  if (selected === correctAnswer) {
    correctAnswers++;
    result.innerHTML = '–¢–∞–º–∞—à–∞! <span style="font-size: 24px;">üòä</span>';
    result.style.color = 'green';
  } else {
    result.innerHTML = `–¢–∞–ª–ø—ã–Ω! <span style="font-size: 24px;">üòï</span> –î“±—Ä—ã—Å –∂–∞—É–∞–ø: ${correctAnswer}`;
    result.style.color = 'red';
    buttonEl.classList.add('wrong');
    delay = 2000;
  }

  currentQuestion++;
  if (currentQuestion < totalQuestions) {
    setTimeout(generateQuestion, delay);
  } else {
    setTimeout(() => {
      document.getElementById('question-label').textContent = '';
      document.getElementById('math-problem').innerHTML = `–°–µ–Ω ${totalQuestions} —Å“±—Ä–∞“õ—Ç—ã“£ ${correctAnswers} –¥“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–¥—ñ“£. –ñ–∞—Ä–∞–π—Å—ã“£! üéâ`;
      document.getElementById('options').innerHTML = '';
    
      // –§–∏–Ω–∞–ª –∫–µ–∑—ñ–Ω–¥–µ –Ω”ô—Ç–∏–∂–µ–Ω—ñ —Ç–∞–∑–∞–ª–∞—É
      const resultEl = document.getElementById('result');
      if (resultEl) {
        resultEl.textContent = '';
        resultEl.style.color = '';
      }
    
      if (document.getElementById('restart-button')) {
        document.getElementById('restart-button').style.display = 'inline-block';
      }
    }, delay + 300);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ (–ú–µ—Ä–µ–π–¥–µ, –ê–ª–∞–Ω–¥–∞, “ö–∞—Å—ã–º–¥–∞ –∏ —Ç.–¥.)
function getCorrectEnding(name) {
  const lastChar = name.slice(-1).toLowerCase();
  const lastTwoChars = name.slice(-2).toLowerCase();
  const vowels = ['–∞', '”ô', '”©', '—ñ', '“Ø', '“±', '—ã', '–æ', '–∏', '—É', '—ç', '—è', '—é'];

  if (lastTwoChars === '–µ–π') {
    return name + '–¥–µ';
  } else if (lastChar === '–µ' || lastChar === '–Ω' || lastChar === '—Ä') {
    return name + '–¥–µ';
  } else if (vowels.includes(lastChar)) {
    return name + '–¥–∞';
  } else {
    return name + '—Ç–∞';
  }
}